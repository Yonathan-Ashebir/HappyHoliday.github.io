{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["statusEnum","dialog","animating","finished","App","_useState","useState","_useState2","Object","slicedToArray","status","setStatus","_useState3","_useState4","name","setName","elements","useRef","m1","buttons","lottie","current","year","lottieCont","onEnter","useCallback","ev","keyCode","onEdit","target","value","hideAll","pause","ind","anime","running","length","reset","targets","opacity","useEffect","scale","easing","duration","delay","stagger","direction","loop","timeline","add","start","begin","playSegments","complete","window","react_default","a","createElement","Stack","sx","justifyContent","height","display","alignItems","backgroundColor","Container","padding","flexFlow","color","fontSize","fontFamily","fontWeight","Array","from","concat","map","ch","key","style","whiteSpace","ref","el","push","index_umd_default","autoPlay","width","transform","animationData","merry_christmas","lottieRef","spacing","borderRadius","IconButton","onClick","then","ReplaySharp","Person2Rounded","Typography","justifySelf","alignSelf","variant","Dialog","open","DialogContent","TextField","borderColor","placeholder","lang","onChange","onKeyDown","paddingTop","paddingBottom","textDecoration","href","ArrowForwardIos","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.c6dcb81b.chunk.js","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Box, Button, Container, Dialog, DialogContent, IconButton, TextField, Typography } from '@mui/material';\nimport { Stack } from '@mui/system';\nimport anime from 'animejs'\nimport Lottie from 'lottie-react'\nimport { ArrowForwardIos, ReplaySharp, Person2Rounded } from '@mui/icons-material'\nimport merry_christmas from './json/merry_christmas.json'\n\nconst statusEnum = { dialog: 'dialog', animating: 'animating', finished: 'finished' }\nfunction App() {\n  const [status, setStatus] = useState(statusEnum.dialog)\n  const [name, setName] = useState('')\n  const elements = useRef<any>({ m1: [], buttons: null, lottie: {current:null}, year: null,lottieCont:null }).current\n\n  const onEnter = useCallback((ev: any) => {\n    if (ev.keyCode === 10 || ev.keyCode === 13) { setStatus(statusEnum.animating) }\n  }, [true])\n  const onEdit = useCallback((ev: any) => setName((ev.target as HTMLInputElement).value), [true])\n  const hideAll = useCallback(() => {\n    elements.lottie.current.pause()\n    for (let ind = 0; ind < anime.running.length; ind++) {\n      (anime.running[ind]as any).reset()\n    }\n    return anime({ targets: [elements.m1, elements.lottieCont, elements.buttons, elements.year], opacity: 0 }).finished\n  }, [true])\n\n  useEffect(() => {\n    switch (status) {\n      case statusEnum.animating:\n\n        anime({ targets: elements.m1, scale: [1, 1.15, 1], easing: 'linear', duration: 1000, delay: anime.stagger(200), direction: 'normal', loop: true })\n\n        anime.timeline().add({ targets: elements.m1, duration: 500, opacity: [0, 1], easing: 'linear', delay: anime.stagger(300, { start: 300 }) })\n\n          .add({ targets: elements.lottieCont, opacity: [0, 1], begin: () => elements.lottie.current.playSegments([0,100]) }).add({ delay: 3000, opacity: [0, 1], targets: [elements.buttons, elements.year], complete: () => setStatus(statusEnum.finished) })\n    }\n  }, [status]);\n\n  (window as any).elements = elements;\n\n  return (\n    <Stack sx={{ justifyContent: 'space-between', height: '100%', display: 'flex', alignItems: 'center', backgroundColor: \"#222\" }}>\n\n      <Container sx={{ padding: '12mm 8mm 8mm 8mm', alignItems: 'center', justifyContent: 'center', display: 'flex', flexFlow: 'row wrap', color: 'goldenrod', fontSize: '2.5rem', fontFamily: 'luxury', fontWeight: 'bold' }}>\n        {Array.from(`Hi, ${name || 'there'}`).map((ch, ind) =>\n          <span key={ind} style={{ whiteSpace: 'pre', display: 'inline-block', opacity: 0 }} ref={(el => el && elements.m1.push(el))}>{ch}</span>\n        )}\n\n      </Container>\n\n\n      <div style={{ padding: '8mm 0 8mm 0', opacity: 0 }} ref={ref => elements.lottieCont = ref}>\n        <Lottie loop={false} autoPlay={false} style={{ width: '90vw' ,transform:\"scale(1.2)\"}} animationData={merry_christmas} lottieRef={elements.lottie} />\n      </div>\n\n      <Stack ref={el => elements.buttons = el} direction={'row'} spacing={3} sx={{ justifyContent: 'center', padding: '1mm', opacity: 0, backgroundColor: \"#eee\", borderRadius: \"5mm\" }}>\n        <IconButton onClick={() => { if (status === statusEnum.finished) { hideAll().then(() => setStatus(statusEnum.animating)) } }}><ReplaySharp></ReplaySharp> </IconButton>\n        <IconButton onClick={() => { if (status === statusEnum.finished) { hideAll().then(() => setStatus(statusEnum.dialog)) } }}><Person2Rounded /></IconButton>\n      </Stack >\n\n      <Typography ref={el => elements.year = el} sx={{ opacity: 0, justifySelf: 'flex-end', alignSelf: 'flex-end', color: 'goldenrod', padding: '2mm' }}\n        variant='h6'>2023 G.C</Typography>\n      <Dialog open={status == statusEnum.dialog}>\n        <DialogContent>\n          <Stack direction=\"column\">\n            <TextField sx={{ borderColor: 'goldenrod' }} value={name} variant='outlined' placeholder='Your name pls' lang='eng' onChange={onEdit} onKeyDown={onEnter}></TextField>\n            <Stack direction={'row'} sx={{ alignItems: 'center', justifyContent: 'space-between', paddingTop: '6mm', paddingBottom: '6mm' }}><Typography\n              variant='body2'><a style={{ textDecoration: 'none', color: 'gray' }} href=\"mailto:yonatha12345678910@gmail.com\">@yonathan_ash</a></Typography>\n              <IconButton onClick={(ev) => { setStatus(statusEnum.animating) }}><ArrowForwardIos /></IconButton>\n            </Stack>\n\n          </Stack>\n        </DialogContent>\n      </Dialog>\n    </Stack >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App.tsx';\nimport reportWebVitals from './reportWebVitals'; \n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode> \n);\n    \n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n        "],"sourceRoot":""}