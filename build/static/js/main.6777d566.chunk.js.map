{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["statusEnum","dialog","animating","finished","App","_useState","useState","_useState2","Object","slicedToArray","status","setStatus","_useState3","_useState4","name","setName","elements","useRef","m1","buttons","lottie","current","year","lottieCont","onEnter","useCallback","ev","keyCode","onEdit","target","value","hideAll","stop","ind","anime","running","length","reset","targets","opacity","formatName","names","split","result","n","charAt","toUpperCase","substring","toLowerCase","useEffect","playSegments","color","scale","easing","duration","delay","stagger","direction","loop","timeline","add","start","begin","play","complete","window","react_default","a","createElement","Stack","sx","overflow","justifyContent","height","display","alignItems","backgroundColor","Container","padding","flexFlow","fontSize","fontFamily","fontWeight","Array","from","concat","map","ch","className","key","style","transition","whiteSpace","ref","el","push","index_umd_default","autoPlay","width","transform","animationData","merry_christmas","lottieRef","spacing","borderRadius","IconButton","onClick","then","ReplaySharp","Person2Rounded","Typography","id","justifySelf","alignSelf","variant","Dialog","open","DialogContent","TextField","borderColor","placeholder","lang","onChange","onKeyDown","paddingTop","paddingBottom","textDecoration","href","ArrowForwardIos","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.6777d566.chunk.js","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Box, Button, Container, Dialog, DialogContent, IconButton, TextField, Typography } from '@mui/material';\nimport { Stack } from '@mui/system';\nimport anime from 'animejs'\nimport Lottie from 'lottie-react'\nimport { ArrowForwardIos, ReplaySharp, Person2Rounded } from '@mui/icons-material'\nimport merry_christmas from './json/merry_christmas.json'\n\nconst statusEnum = { dialog: 'dialog', animating: 'animating', finished: 'finished' }\nfunction App() {\n  const [status, setStatus] = useState(statusEnum.dialog)\n  const [name, setName] = useState('')\n  const elements = useRef<any>({ m1: [], buttons: null, lottie: { current: null }, year: null, lottieCont: null }).current\n\n  const onEnter = useCallback((ev: any) => {\n    if (ev.keyCode === 10 || ev.keyCode === 13) { setStatus(statusEnum.animating) }\n  }, [true])\n  const onEdit = useCallback((ev: any) => setName((ev.target as HTMLInputElement).value), [true])\n  const hideAll = useCallback(() => {\n    elements.lottie.current.stop()\n    for (let ind = 0; ind < anime.running.length; ind++) {\n      (anime.running[ind] as any).reset()\n    }\n    return anime({ targets: [elements.m1, elements.lottieCont, elements.buttons, elements.year], opacity: 0 }).finished\n  }, [true])\n  const formatName = useCallback((name: string) => {\n    let names = name.split(' ');\n    let result = '';\n    for (let ind = 0; ind < names.length; ind++) {\n      let n = names[ind];\n      if (n.length == 0) continue;\n      if (result.length != 0) result += ' ';\n      result += n.charAt(0).toUpperCase();\n      result += n.substring(1).toLowerCase();\n    }\n    return result;\n  }, [true]);\n\n  useEffect(() => {\n    elements.lottie.current.playSegments([0, 100]);\n  }, [true])\n\n  useEffect(() => {\n    switch (status) {\n      case statusEnum.animating:\n\n        anime({ targets: elements.m1, color: ['#DAA520', '#FFFF00', '#DAA520'], scale: [1, 1.2, 1], easing: 'linear', duration: 1000, delay: anime.stagger(200), direction: 'normal', loop: true })\n\n        anime.timeline().add({ targets: elements.m1, duration: 500, opacity: [0, 1], easing: 'linear', delay: anime.stagger(300, { start: 300 }) })\n          .add({ targets: elements.lottieCont, opacity: [0, 1], begin: () => { elements.lottie.current.stop(); elements.lottie.current.play() }, duration: 500 }).add({ delay: 6000, opacity: [0, 1], targets: [elements.buttons, elements.year], complete: () => setStatus(statusEnum.finished) })\n    }\n  }, [status]);\n\n  (window as any).elements = elements;\n\n  return (\n    <Stack sx={{ overflow: 'hidden', justifyContent: 'space-between', height: '100%', display: 'flex', alignItems: 'center', backgroundColor: \"#222\" }}>\n\n      <Container sx={{ padding: '12mm 8mm 8mm 8mm', alignItems: 'center', justifyContent: 'center', display: 'flex', flexFlow: 'row wrap', color: 'goldenrod', fontSize: '3em', fontFamily: 'luxury', fontWeight: 'bold' }}>\n        {Array.from(`Hi, ${formatName(name) || 'there'}`).map((ch, ind) =>\n          <span className=\"greeting\" key={ind} style={{ transition: 'all 300ms', whiteSpace: 'pre', display: 'inline-block', opacity: 0 }} ref={(el => el && elements.m1.push(el))}>{ch}</span>\n        )}\n\n      </Container>\n\n\n      <div style={{ padding: '8mm 0 8mm 0', opacity: 0 }} ref={ref => elements.lottieCont = ref}>\n        <Lottie loop={false} autoPlay={false} style={{ width: '90vw', transform: \"scale(1.2)\" }} animationData={merry_christmas} lottieRef={elements.lottie} />\n      </div>\n\n      <Stack ref={el => elements.buttons = el} direction={'row'} spacing={3} sx={{ justifyContent: 'center', padding: '1mm', opacity: 0, backgroundColor: \"goldenrod\", borderRadius: \"5mm\" }}>\n        <IconButton onClick={() => { if (status === statusEnum.finished) { hideAll().then(() => setStatus(statusEnum.animating)) } }}><ReplaySharp></ReplaySharp> </IconButton>\n        <IconButton onClick={() => { if (status === statusEnum.finished) { hideAll().then(() => setStatus(statusEnum.dialog)) } }}><Person2Rounded /></IconButton>\n      </Stack >\n\n      <Typography id=\"year\" ref={el => elements.year = el} sx={{ opacity: 0, justifySelf: 'flex-end', alignSelf: 'flex-end', color: 'goldenrod', padding: '2mm' }}\n        variant='h6'>2023 G.C</Typography>\n      <Dialog open={status == statusEnum.dialog}>\n        <DialogContent>\n          <Stack direction=\"column\">\n            <TextField sx={{ borderColor: 'goldenrod' }} value={name} variant='outlined' placeholder='Your name pls' lang='eng' onChange={onEdit} onKeyDown={onEnter}></TextField>\n            <Stack direction={'row'} sx={{ alignItems: 'center', justifyContent: 'space-between', paddingTop: '6mm', paddingBottom: '6mm' }}><Typography\n              variant='body2'><a style={{ textDecoration: 'none', color: 'gray' }} href=\"mailto:yonatha12345678910@gmail.com\">@yonathan_ash</a></Typography>\n              <IconButton onClick={(ev) => { setStatus(statusEnum.animating) }}><ArrowForwardIos /></IconButton>\n            </Stack>\n\n          </Stack>\n        </DialogContent>\n      </Dialog>\n    </Stack >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App.tsx';\nimport reportWebVitals from './reportWebVitals'; \n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode> \n);\n    \n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n        "],"sourceRoot":""}